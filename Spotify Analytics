# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and rounded the average values with 2 decimal places.

SELECT
artist_name
,track_name
,ROUND(avg(popularity),2) as Average_Popularity
,ROUND(AVG(danceability),2) as Average_Danceability
,ROUND(avg(energy),2) as Average_Energy
FROM BIT_DB.spotifydata
GROUP BY artist_name
order by artist_name;

#Then I determined who the Top 10 artists are by popularity.

SELECT track_name,artist_name,popularity from BIT_DB.spotifydata
order by popularity desc
LIMIT 10;


#After that I wanted to check which artist released the longest song in seconds.

select artist_name, track_name, duration_ms/1000 as Duration_Seconds from BIT_DB.spotifydata
order by Duration_Seconds desc
Limit 1;


#On the next one I determined the average danceability for the top 10 most popular songs.

select track_name,popularity,round(avg(danceability),2) as Avg_Danceability from BIT_DB.spotifydata
group by popularity
order by popularity desc
limit 10;



